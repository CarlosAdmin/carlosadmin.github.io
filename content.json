[{"title":"Net值类型和引用类型","date":"2017-09-10T16:26:27.000Z","path":"2017/09/11/netvaluetype/","text":"Net面试题之值类型和引用类型 在C#中值类型的变量直接存储数据，而引用类型的变量持有的是数据的引用，数据存储在数据堆中。 值类型（value type）：byte，short，int，long，float，double，decimal，char，bool 和 struct 统称为值类型。值类型变量声明后，不管是否已经赋值，编译器为其分配内存 引用类型（reference type）：string 和 class统称为引用类型。当声明一个类时，只在栈中分配一小片内存用于容纳一个地址，而此时并没有为其分配堆上的内存空间。当使用 new 创建一个类的实例时，分配堆上的空间，**并把堆上空间的地址保存到栈上分配的小片空间中 值类型 C#所有值类型均隐式派生自System.ValueType 结构体：struct（直接派生于System.ValueType）； 数值类型： 整型：sbyte（System.SByte的别名），short（System.Int16），int（System.Int32），long（System.Int64），byte（System.Byte），ushort（System.UInt16），uint（System.UInt32），ulong（System.UInt64），char（System.Char）； 浮点型：float（System.Single），double（System.Double）； 用于财务计算的高精度decimal型：decimal（System.Decimal）。 bool型：bool（System.Boolean的别名）； 用户定义的结构体（派生于System.ValueType）。 枚举：enum（派生于System.Enum）； 可空类型（派生于System.Nullable泛型结构体，T?实际上是System.Nullable的别名） 引用类型 数组（派生于System.Array） 用户用定义的以下类型： 类：class（派生于System.Object） 接口：interface（接口不是一个“东西”，所以不存在派生于何处的问题。 Anders在《C# Programming Language》中说，接口只是表示一种约定[contract]） 委托：delegate（派生于System.Delegate）。 object（System.Object的别名） 字符串：string（System.String的别名） 相同点 值类型都是密封（seal）的，所以无法派生出新的值类型。 型和值类型都继承自System.Object类 不同点 有的引用类型都直接从System.Object继承，而值类型则继承其子类，即直接继承System.ValueType。System.ValueType直接派生于System.Object。即System.ValueType本身是一个类类型，而不是值类型。其关键在于ValueType重写了Equals()方法，从而对值类型按照实例的值来比较，而不是引用地址来比较 型可以派生出新的类型，而值类型不能 型可以包含null值，值类型不能（可空类型功能允许将 null 赋给值类型） 型变量的赋值只复制对对象的引用，而不复制对象本身。值类型变量赋给另一个值类型变量时，将复制包含的值。","tags":[{"name":"Net","slug":"Net","permalink":"http://blog.xiehongchao.cn/tags/Net/"},{"name":"面试","slug":"面试","permalink":"http://blog.xiehongchao.cn/tags/面试/"}]},{"title":"redis安装","date":"2017-09-10T10:29:42.000Z","path":"2017/09/10/redisinstall/","text":"下载 wget http://download.redis.io/releases/redis-4.0.1.tar.gz 解压 以.tar.gz/.tgz为扩展名的文件:tar xvzf redis-4.0.1.tar.gzgzip -dc redis-4.0.1.tar.gz | tar xvf - 进入解压后的目录cd redis cd utils sh install_server.sh 执行安装可先修改默认配置Redis目录下redis.conf安装之后 输出配置信息 Selected config:Port : 6379Config file : /etc/redis/6379.confLog file : /var/log/redis_6379.logData dir : /var/lib/redis/6379Executable : /usr/local/bin/redis-serverCli Executable : /usr/local/bin/redis-cli 自定义登录脚本Redis.sh#/bin/sh cd redisredis-cli -a password","tags":[{"name":"Redis","slug":"Redis","permalink":"http://blog.xiehongchao.cn/tags/Redis/"},{"name":"Centos","slug":"Centos","permalink":"http://blog.xiehongchao.cn/tags/Centos/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.xiehongchao.cn/tags/Linux/"}]},{"title":"hexo简单命令","date":"2017-09-06T13:41:01.000Z","path":"2017/09/06/hexocommand/","text":"hexo 命令 hexo new “postName” #新建文章 hexo new page “pageName” #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server） hexo deploy #将.deploy目录部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本 hexo deploy -g #生成加部署 hexo server -g #生成加预览 命令的简写 hexo n == hexo new hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy 备注 title: hexo commanddate: 2017-09-06 21:41:01tags: - hexo - 命令 - 其他 categories: 其他","tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.xiehongchao.cn/tags/hexo/"},{"name":"命令","slug":"命令","permalink":"http://blog.xiehongchao.cn/tags/命令/"},{"name":"其他","slug":"其他","permalink":"http://blog.xiehongchao.cn/tags/其他/"}]}]